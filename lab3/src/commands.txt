gcc find_min_max.c sequential_min_max.c utils.c -o ./task1

src (master) $ ./task1 3 3
1205554746 483147985 844158168 
min: 483147985
max: 1205554746

src (master) $ ./task1 3 6
1205554746 483147985 844158168 953350440 612121425 310914940 
min: 310914940
max: 1205554746

/////////////

gcc find_min_max.c parallel_min_max.c utils.c -o ./task2
./task2 --seed 3 --array_size 6 --pnum 2
./task2 --seed 3 --array_size 6 --pnum 2 --by_files

gcc find_min_max.c sequential_min_max.c utils.c -o ./task1 && gcc find_min_max.c parallel_min_max.c utils.c -o ./task2

/////////////

make all (собрать все) или просто make

/////////////

Системный вызов pipe создаёт механизм ввода вывода, который называется конвейером.
Возвращаемый файловый дескриптор можно использовать для операций чтения и записи.
Когда в конвейер что-то записывается, то буферизуется до 504 байтов данных,
после чего процесс записи приостанавливается.

pipe() создаёт однонаправленный канал данных, который можно использовать для взаимодействия
между процессами. Массив pipefd используется для возврата двух файловых описателей, указывающих
на концы канала. pipefd[0] указывает на конец канала для чтения. pipefd[1] указывает на конец
канала для записи.

/////////////

fork() — системный вызов в Unix-подобных операционных системах, создающий новый процесс
(потомок), который является практически полной копией процесса-родителя, выполняющего этот вызов.

/////////////

Системный вызов exec() изменяет пользовательский контекст текущего процесса, не создавая новый процесс.



